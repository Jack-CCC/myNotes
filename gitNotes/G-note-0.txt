1.进入git：
在任意窗口(桌面)右键，有git选项

2.设置本机器
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"

3.在当前目录创建名为learn的目录
$ mkdir learn

4.进入到当前目录下的learn目录
$ cd learn

5.显示当前目录
$ pwd

6.显示当前目录下所有的文件和文件夹
$ ls -ah

7.版本控制系统VCS(version control system)只能跟踪文本文件的改动，包括txt文件，网页，程序源代码等，能够得知改动的内容；对于二进制文件，例如图片视频等，只能知道其文件大小的改变(微软的word文档就是二进制格式)。
git管理的文本文件最好用UTF-8 without BOM编码


**********************************************************************************************************************

8.初始化一个目录为git仓库
$ git init


9.将文件提交到git管理
---------------------------------------------
①把该文件放到git库目录下(例子:该文件为readme.txt)
----------------------------------------
②使用git add命令添加该文件到仓库(此文件需要在当前目录下才可以被找到)
$ git add readme.txt
-----------------------------------------
③使用git commit将文件提交到仓库(后面通常要加上关于此次操作的解释)
$ git commit -m "注释"
(commit可以一次提交多个文件，所以可以先add多次不同文件，然后再一起commit)
-----------------------------------------


10.随时掌握仓库当前状态(可以知道哪些文件被修改过)
$ git status


11.查看某文件具体的修改内容(结果是用Unix的diff格式来显示的)
$ git diff readme.txt


12.提交某文件的修改
-------------------------------------------修改文件
$ git status                               查看仓库状态，是否有修改结果(是否被提交)
$ git diff readme.txt                      查看具体的修改
$ git add readme.txt                       先添加该文件
$ git status                               查看当前仓库的状态(可以查看到被提交的修改是否是我们选定的)
$ git commit -m "本次修改的相关注释"       提交该修改
$ git status                               再次查看仓库状态


13.查看提交历史，按时间从近到远排序
$ git log
特殊地，只输出提交日志的commit id和注释，需要加 --pretty=oneline 参数
$ git log --pretty=oneline


14.在git中用HEAD表示当前版本，也就是最新的提交，上一个版本就是HEAD^，上上一个版本HEAD^^,如果版本数过多，HEAD~100表示往上100个版本


15.版本回退：
Git内部使用HEAD指针来指向当前版本，所有版本回退速度很快
$ git reset --hard HEAD^                                     将该文件版本回退到上一个
$ git reset --hard /*commit Id(前几位即可唯一识别)*/         将文件版本回退到该版本号(向前/向后都可以)


16.查看readme文本内容
$ cat readme.txt


17.查看命令执行历史记录(可以查看因回退而消失的向前版本的commit ID,从而恢复已消失的版本)
$ git reflog


18.查看工作区和版本库里面最新版本的区别(文件名和--可以分别省略，可以都省略)
$ git diff HEAD -- 文件名  


19.丢弃修改
(撤销没有add也没有commit的修改,即工作区修改,最近一次commit/add后所有未commit/未add的修改都视作一起)
$ git checkout -- 文件名

(将已add到暂存区的修改撤销(所有当前未commit的修改都将被一起丢弃),分为两步)
$ git reset HEAD 文件名    (将这次修改的添加状态撤销)
$ git checkout -- 文件名   (将退回的修改彻底丢弃)

(已提交的修改如果需要撤销，选择版本回退(15.))


20.删除文件
①$ rm 文件名                  (也可以手动删除)
②$ git status                 (git 识别删除的状态)
③$ git rm 该文件名
④$ git commit -m "注释"       (向git提交此次删除)

21.恢复被删除的文件
$ git checkout -- 文件名      (git checkout命令其实是用版本库里的版本代替工作区的版本,可以恢复工作区的删除)
如果使用git命令删除或删除已提交，则需要版本回退来恢复文件

==================================================远程库============================================================

22.添加远程库关联
$ git remote add <约定一个远程库名> git@github.com:GitHub账户名/要关联的远程库.git

23.将本地库的所有内容推送到远程库上
$ git push -u 约定的远程库名 master
(-u参数关联了远程库和本地库的分支，以后的推送或者拉取就可以简化命令)
以后推送最新修改就可以通过：
$ git push 约定的远程库名 master


24.将远程库的内容克隆到本地(当前目录下)
(克隆完成后，自动将本地的master分支和远程master分支对应起来，git默认用origin来标识被克隆的远程库)
(注意，克隆完成后需要进入克隆库再操作，否则当前目录是克隆库的上一级)
$ git clone git@github.com:GitHub账户名/要克隆的远程库.git

