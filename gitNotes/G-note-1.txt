1.创建分支
$ git branch <name>

2.切换到某分支
$ git checkout <name>

特别的
$ git checkout -b <name>  (创建分支并切换到它)

3.查看当前分支(会显示所有分支，并使用*标注当前使用的分支)
$ git branch

4.合并指定分支到当前分支(默认Fast-forward)
$ git merge <指定分支名>
Fast-forward表示合并是"快进模式",即将当前分支指针直接指向指定分支的提交(不是每次都可以Fast-forward)

5.删除分支
$ git branch -d <name>

==================================================================================================================================================

6.分支冲突
(解决冲突：将Git合并失败的文件手动编辑为我们希望的内容，再提交)
①当两个分支分别做了修改提交后，使用git merge合并会产生冲突，
②合并出现冲突后，使用git status可以查看发生合并冲突的文件
③此时使用cat命令打开文件可以发现git已经标注了两个分支存在冲突的地方
④修改该文件后，再add,commit到当前分支
⑤使用$ git log --graph --pretty=oneline --abbrev-commit可以查看分支的合并情况
⑥此时另一分支可以删除。


7.分支管理策略
①master分支应该是非常稳定的，仅仅用来发布新版本，平时不在上面干活
②程序员们把自己的分支每次都提交给另一个不稳定的分支
③版本发布时，再将这个分支合并到master上


8.合并指定分支到当前分支(--no-ff方式)
>>>>加上--no-ff参数就可以用普通模式合并，合并后的历史有分支,能看出来曾经做过合并
>>>>而fast forward合并就看不出来曾经做过合并(修改都能看到，但是修改都显示在当前分支上了,合并发生冲突时会看出来)。
$ git merge --no-ff [-m "注释"] <指定分支名>
解释：
==Fast-forward合并模式下，删除分支后，会丢失分支信息，使用git log --oneline -10 --graph会发现所有的提交和修改都时在当前分支下的(包括被合并的修改)
==强制禁用Fast-forward模式，git会在合并(merge)时生成一个新的commit(父级提交,这是-ff没有的)，这样，在当前分支历史上就可以看出分支信息


=====================================================================================================

9.bug分支
大体上：当分支dev上的工作进行到一半，无法提交，却需要修改分支master上某个bug时，可以保存现场，然后新建一个临时分支，修改bug提交到master分支之后，再回到现场
通常的做法是:当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

①$ git stash save "此现场的说明"    >>>储藏当前工作现场，将工作区和暂存区恢复到修改之前
②$ git checkout master        >>>选择有bug需要修改的分支
③$ git checkout -b issue-101  >>>在当前分支上创建一个临时分支，分支名代表着我们要修复bug101
④修复bug……
⑤$ git add <name>             >>>更新bug修改
 $ git commit -m "修复了bug101"
 $ git checkout master
 $ git merge --no-ff -m "把已经修复的bug更新到master分支" issue-101
⑥$ git branch -d issue-101     >>>删除bug分支
⑦$ git checkout dev            >>>回到工作分支dev继续
⑧$ git stash list              >>>查看已储藏的工作现场
⑨恢复现场方式一:
 $ git stash apply [stash@{num}(省略此项意味着恢复最近的一次现场)] 	>>>恢复stash现场
 $ git stash drop  [stash@{num}(省略此项意味着删除最近的一次现场)]      >>>删除stash现场
 恢复现场方式二:
 $ git stash pop [stash@{num}(省略此项意味着恢复最近的一次现场并删除)]    >>>恢复现场的同时把stash内容也删了


>>>$ git stash list 查看已储藏的所有stash,编号越小代表保存进度的时间越近
>>>$ git stash clear 删除所有保存的现场(已做的未add的修改也将被删除)


=====================================================================================================

10.强制删除
开发一个新功能最好新建一个分支，完成该功能后再合并到主分支
如果要舍弃一个没有合并过的分支，需要使用强制删除命令:
(如果这个未合并的新建分支有已提交的修改，那么无法使用-d来删除)
$ git branch -D <name> 

================================================================================================================
远程仓库和本地分支
11.多人协作和推送分支
$ git remote [-v(-v参数显示更详细的信息)]   >>>查看和本地分支关联的远程仓库
(-v的结果显示可以抓取fetch和推送push的远程库的地址,如果没有push权限，就看不到push的地址)

$ git push <远程库别名> <本地要推送的分支>    >>>将本地分支上的所有提交推送到远程库
(主分支和开发分支需要开发人员共享，要与远程同步，其他分支可以视情况决定是否推送到远程)

12.抓取分支(当这台电脑的SSH key添加到了GitHub时，才可以修改远程库)
①$ git clone git@github.com:<GitHub账号名>/<远程库名>.git       >>>克隆远程库到本地(默认情况下,本地只能看到主分支(master))
②$ git checkout -b dev <远程库名>/<远程的工作分支名>            >>>在本地创建和远程分支对应的分支,分支名最好一致
③修改,提交……(add,commit)
④$ git push <远程库名> dev                                      >>>将本地dev分支的提交推送到远程库中关联的分支上
*********************************************************************************************************
$ git pull <远程库别名> <远程分支>:<本地分支名>       取回远程分支，与本地分支合并
-------如果是与当前分支合并，冒号以及后面的部分可以省略
-------如果当前分支与远程分支存在关联,git pull可以省略<远程分支>
-------如果当前分支只有一个对应远程分支,<远程库别名>也可以省略
----如果远程库删除了某个分支，在git pull时本地不会删除对应分支


*********************************************************************************************************
13.多人协作的工作模式
①$ git push <远程库别名> <对应分支>          >>>推送自己的修改
②$ git pull                                  >>>如果推送失败，因为远程分支比本地更新，先试图抓取远程的提交与本地的分支合并
③在本地合并，遇到冲突则先解决冲突，并在本地提交
④$ git push <远程库别名> <对应分支>          >>>没有冲突或者解决冲突之后，合并，再次推送即可成功

特别的,如果git pull提示no tracking information,说明本地分支和远程分支的连接关系没有创建，需要
>>>建立本地分支和远程对应分支的关联
$ git branch --set-upstream <本地对应的分支> <远程库别名>/<远程库的分支>

================================================================================================================

14.将本地未push的分叉提交历史整理成直线
$ git rebase   


